import{_ as s,o as n,c as a,V as o}from"./chunks/framework.75331a37.js";const l="/assets/pic10.7f7a0f40.png",p="/assets/pic11.0eb5f5e9.png",t="/assets/pic12.b0d7efa7.png",e="/assets/pic9.67cedc0c.png",r="/assets/pic4.09d33fc7.png",c="/assets/code1.19fb2e5b.png",i="/assets/code2.f7f41891.png",y="/assets/code3.52537b05.png",F="/assets/code4.c3697b58.png",D="/assets/pic5.b8325688.png",A="/assets/pic2.734f91ce.png",C="/assets/pic8.d6f08c13.png",g="/assets/pic1.d2f4570b.png",d="/assets/pic3.6c3f8fdf.png",V=JSON.parse('{"title":"前言","description":"","frontmatter":{},"headers":[],"relativePath":"Google V8/V8(1) - 变量提升，作用域、内存管理机制、闭包、如何执行JS代码.md","filePath":"Google V8/V8(1) - 变量提升，作用域、内存管理机制、闭包、如何执行JS代码.md"}'),h={name:"Google V8/V8(1) - 变量提升，作用域、内存管理机制、闭包、如何执行JS代码.md"},u=o(`<ul><li><a href="#前言">前言</a></li><li><a href="#变量提升var-bell">变量提升(var) 🔔</a><ul><li><a href="#关于作用域变量提升函数表达式立即函数表达式的经典面试题">关于作用域、变量提升、函数表达式、立即函数表达式的经典面试题</a></li><li><a href="#变量提升带来的问题">变量提升带来的问题</a></li></ul></li><li><a href="#作用域">作用域</a><ul><li><a href="#全局作用域和函数作用域">全局作用域和函数作用域</a></li><li><a href="#块级作用域letconst-暂时性死区">块级作用域(let，const， 暂时性死区)</a></li></ul></li><li><a href="#作用域链">作用域链</a><ul><li><a href="#词法作用域">词法作用域</a></li></ul></li><li><a href="#内存管理机制---堆和栈-bell">内存管理机制 - 堆和栈 🔔</a><ul><li><a href="#栈空间和堆空间简介">栈空间和堆空间简介</a></li><li><a href="#栈空间的重要作用---管理函数调用创建并切换函数执行上下文">栈空间的重要作用 - 管理函数调用（创建并切换函数执行上下文）</a></li><li><a href="#有了栈为什么还要堆">有了栈，为什么还要堆？</a></li></ul></li><li><a href="#闭包-bell">闭包 🔔</a><ul><li><a href="#延迟解析v8如何实现闭包">延迟解析：V8如何实现闭包？</a><ul><li><a href="#预解析器如何解决闭包给惰性解析带来的问题">预解析器如何解决闭包给惰性解析带来的问题</a></li></ul></li></ul></li><li><a href="#什么是v8">什么是V8？</a></li><li><a href="#v8-如何执行-javascript-代码bell">V8 如何执行 JavaScript 代码？🔔</a><ul><li><a href="#第一步编译阶段">第一步：编译阶段</a></li><li><a href="#第二步执行阶段">第二步：执行阶段</a></li></ul></li><li><a href="#v8中的对象表示">V8中的对象表示</a></li><li><a href="#二进制代码如何被cpu执行的">二进制代码如何被CPU执行的？</a></li></ul><blockquote><p>参考链接：<a href="https://time.geekbang.org/column/intro/100048001" target="_blank" rel="noreferrer">https://time.geekbang.org/column/intro/100048001</a></p></blockquote><h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>网页的工作过程需要使用到两个引擎渲染引擎和JavaScript引擎。它们分别负责不同的事情：<strong>JavaScript引擎</strong>负责执行JavaScript代码，而<strong>渲染引擎</strong>负责渲染网页。</p><p>JavaScript引擎提供调用接口被渲染引擎使用，渲染引擎使用JavaScript引擎来处理JavaScript代码并获取结果。</p><p>JS引擎，简单来说就是能够提供执行JavaScript代码的运行环境。</p><p>JS的引擎包括：<strong>Google V8、JavaScriptCore</strong>等，其中Google V8是主流浏览器的选择。</p><blockquote><p>参考文章：<a href="https://www.jianshu.com/p/565dfad8d41e" target="_blank" rel="noreferrer">什么是JS引擎</a></p></blockquote><h1 id="变量提升-var" tabindex="-1">变量提升(var) 🔔 <a class="header-anchor" href="#变量提升-var" aria-label="Permalink to &quot;变量提升(var) :bell:&quot;">​</a></h1><p>变量提升指的是：在V8执行js源码前，会先进行预编译，预编译期间会将<code>变量声明</code>与<code>函数声明</code>提升至其对应<code>作用域</code>的最顶端。</p><ol><li>变量提升只会提升变量名的声明，而不会提升变量的赋值初始化。</li><li>函数提升的<strong>优先级大于</strong>变量提升的，即函数提升在变量提升之上。</li></ol><p>注意：</p><ul><li>对于<code>变量提升</code>来说：只是将<code>声明</code>提升到作用域最顶端，并不会把<code>赋值</code>也提升上来。</li><li>函数定义有声明式和函数字面量式。只有<code>函数声明</code>才存在函数提升！</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(x) </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(f1)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//打印完整对象 ƒ f1(){}</span></span>
<span class="line"><span style="color:#82AAFF;">f1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// test</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(f2)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 声明式</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> f2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 字面量</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// [Function: a]</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 相当于这样</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span></span></code></pre></div><p>ps:</p><ul><li>var的<strong>创建和初始化</strong>被提升，赋值不会被提升。</li><li>let的<strong>创建</strong>被提升，初始化和赋值不会被提升。</li><li>function的<strong>创建、初始化和赋值</strong>均会被提升。</li></ul><h2 id="关于作用域、变量提升、函数表达式、立即函数表达式的经典面试题" tabindex="-1">关于作用域、变量提升、函数表达式、立即函数表达式的经典面试题 <a class="header-anchor" href="#关于作用域、变量提升、函数表达式、立即函数表达式的经典面试题" aria-label="Permalink to &quot;关于作用域、变量提升、函数表达式、立即函数表达式的经典面试题&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(n)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 100</span></span></code></pre></div><p>原因：</p><ol><li>编译阶段，先在全局作用域内声明变量 n 的值为<code>undefined</code>，然后声明函数表达式；编译阶段结束。</li><li>开始执行阶段，将 1 赋值给 n，函数表达式<strong>立即执行</strong>，欲将 100 赋值给变量 n，但在当前作用域内没有找到 n 的声明，沿着作用域链向上查找，在<strong>全局作用域</strong>内找到了变量 n，将 100 赋给它，接着执行立即函数调用表达式中的打印语句，输出 n，为100。</li><li>接着执行后面的打印语句，此时 n 的值已经由 1 被修改为了 100，因此输出 100</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(n)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 100</span></span></code></pre></div><p>原因：</p><ol><li>第一次打印的时候，函数只是被放入作用域，函数没有执行，输出的是全局作用域中声明并赋值好的1；</li><li>然后函数执行，将<strong>全局作用域</strong>中的 n 修改为 100，因此输出 100。</li></ol><h2 id="变量提升带来的问题" tabindex="-1">变量提升带来的问题 <a class="header-anchor" href="#变量提升带来的问题" aria-label="Permalink to &quot;变量提升带来的问题&quot;">​</a></h2><ol><li><p><strong>变量容易在不被察觉的情况下被覆盖掉</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myname </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">极客时间</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">showName</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myname</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myname</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">极客邦</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myname</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">showName</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>调用栈如下：</p><img src="`+l+`" width="60%/"><p>JavaScript 会优先从当前的执行上下文中查找变量，由于变量提升，当前的执行上下文中就包含了变量 myname，而值是 undefined，所以获取到的 myname 的值就是 undefined。</p></li><li><p><strong>本应销毁的变量没有被销毁</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span></code></pre></div></li></ol><p>最后打印结果都是<code>7</code>。因为在创建执行上下文阶段，变量 i 就已经被<code>提升</code>了，所以当 for 循环结束之后，变量 i 并没有被销毁。</p><h1 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h1><p>作用域就是存放<strong>变量和函数</strong>的地方，位置决定了变量的生命周期。通俗地理解，作用域就是变量与函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期。</p><h2 id="全局作用域和函数作用域" tabindex="-1">全局作用域和函数作用域 <a class="header-anchor" href="#全局作用域和函数作用域" aria-label="Permalink to &quot;全局作用域和函数作用域&quot;">​</a></h2><p>在ES6之前，只有两种作用域：</p><ul><li><code>全局作用域</code>：在 V8 启动过程中就创建了，且一直保存在内存中不会被销毁的，直至 V8 退出。 全局作用域中的对象在代码中的任何地方都能访问，其生命周期伴随着页面的生命周期。</li><li><code>函数作用域</code>：在执行该函数时创建的，并且定义的变量或者函数只能在函数内部被访问。当函数执行结束之后，函数作用域就随之被销毁掉了。</li></ul><blockquote><p>V8采用<code>词法(静态)作用域</code>， 即函数的作用域在函数<strong>定义</strong>的时候就决定了。</p></blockquote><h2 id="块级作用域-let-const-暂时性死区" tabindex="-1">块级作用域(let，const， 暂时性死区) <a class="header-anchor" href="#块级作用域-let-const-暂时性死区" aria-label="Permalink to &quot;块级作用域(let，const， 暂时性死区)&quot;">​</a></h2><p>但由于变量提升带来的问题，会给人带来误解。所以ES6引入了<code>let</code> 和 <code>const</code> 关键字，从而使 JavaScript 也能像其他语言一样拥有了<code>块级作用域</code>。</p><p>let 和 const 的用法如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">6</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span></span>
<span class="line"><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//报错，const声明的变量不可以修改</span></span></code></pre></div><p><strong>作用域块内声明的变量不影响块外面的变量</strong>。例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">letTest</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 不同的变量</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>级作用域就是通过<strong>词法环境</strong>的栈结构来实现的，而变量提升是通过<strong>变量环境</strong>来实现，通过这两者的结合，JavaScript 引擎也就同时支持了变量提升和块级作用域了。</p><ul><li>函数内部通过 var 声明的变量，在编译阶段全都被存放到<strong>变量环境</strong>里面了。</li><li>通过 let 声明的变量，在编译阶段会被存放到<strong>词法环境</strong>中。</li><li>在函数的作用域块内部，通过 let 声明的变量并没有被存放到词法环境中。</li></ul><p>词法环境和变量环境中查找变量的方式是：<strong>先词法环境 -&gt; 再变量环境</strong></p><p>🌰例子1：</p><img src="`+p+`"><p>🌰例子2:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myname</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">极客时间</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myname</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// Uncaught ReferenceError: Cannot access &#39;myname&#39; before initialization</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myname</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">极客邦</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>块作用域内，let声明的变量被提升，但变量只是创建被提升，初始化并没有被提升，在初始化之前使用变量，就会形成一个<strong>暂时性死区</strong>。</p><blockquote><p>TDZ(暂时性死区)：ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。简单理解，在let或者const声明之前使用该变量，就会报错。</p></blockquote><h1 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h1><p>其实在每个执行上下文的变量环境中，都包含了一个外部引用，用来<strong>指向外部的执行上下文</strong>，我们把这个外部引用称为 <code>outer</code>。</p><p>当一段代码使用了一个变量时，JavaScript 引擎首先会在<strong>当前的执行上下文</strong>中查找该变量，如果没有找到js引擎会在<code>outer</code>所指向的上下文中查找。我们把这个查找的链条就称为<code>作用域链</code>。</p><p>🌰例子： <img src="`+t+'"></p><h2 id="词法作用域" tabindex="-1">词法作用域 <a class="header-anchor" href="#词法作用域" aria-label="Permalink to &quot;词法作用域&quot;">​</a></h2><p>词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，通过它就能够预测代码在执行过程中如何查找标识符。</p><h1 id="内存管理机制-堆和栈" tabindex="-1">内存管理机制 - 堆和栈 🔔 <a class="header-anchor" href="#内存管理机制-堆和栈" aria-label="Permalink to &quot;内存管理机制 - 堆和栈 :bell:&quot;">​</a></h1><blockquote><p>参考链接：<a href="https://juejin.cn/post/6844904004007247880" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904004007247880</a></p></blockquote><p>JavaScript 是一种<strong>弱类型的、动态</strong>的语言。</p><p>在 JavaScript 的执行过程中， 主要有三种类型内存空间，分别是<code>代码空间</code>、<code>栈空间</code>和<code>堆空间</code>。其中的代码空间主要是存储可执行代码的，先不进行介绍。</p><img src="'+e+`" width="50%/"><h2 id="栈空间和堆空间简介" tabindex="-1">栈空间和堆空间简介 <a class="header-anchor" href="#栈空间和堆空间简介" aria-label="Permalink to &quot;栈空间和堆空间简介&quot;">​</a></h2><ul><li>基本数据类型用<code>栈</code>存储。栈会自动分配内存空间，会自动释放。</li><li>引用数据类型的<strong>值</strong>用<code>堆</code>存储（键和值的地址存储于在<code>栈</code>内存）。堆动态分配的内存，大小不定也不会自动释放。</li></ul><blockquote><p>🔔 <strong>闭包变量</strong>先存在<code>栈</code>中，然后在预解析器阶段在将变量复制在<strong>堆</strong>空间中，即便外部前函数执行结束之后，也不会释放该变量。</p></blockquote><p>🔔 对于<code>赋值</code>操作，<strong>原始类型</strong>的数据直接完整地复制<strong>变量值</strong>，<strong>对象数据类型</strong>的数据则是复制<strong>引用地址</strong>。</p><p>看下面的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">newObj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//变成了2</span></span></code></pre></div><p>因为obj是引用数据类型，<code>let newObj = obj;</code>该语句将obj的<strong>引用地址</strong>赋值给了newObj，所以newObj和obj指向的是同一块<strong>堆内存空间</strong>，所以改变newObj等于改变了共同的堆内存。</p><p>常见面试题：JavaScript基础 -《深浅拷贝》</p><h2 id="栈空间的重要作用-管理函数调用-创建并切换函数执行上下文" tabindex="-1">栈空间的重要作用 - 管理函数调用（创建并切换函数执行上下文） <a class="header-anchor" href="#栈空间的重要作用-管理函数调用-创建并切换函数执行上下文" aria-label="Permalink to &quot;栈空间的重要作用 - 管理函数调用（创建并切换函数执行上下文）&quot;">​</a></h2><p><code>函数</code>有两个主要的特性：</p><ol><li>可被调用：可以在一个函数中调用另外一个函数，当函数调用发生时，执行代码的控制权将从父函数转移到子函数，子函数执行结束之后，又会将代码执行控制权返还给父函数。</li><li>具有作用域机制：是指函数在执行的时候可以将定义在函数内部的变量和外部环境隔离，在函数内部定义的变量我们也称为临时变量，临时变量只能在该函数中被访问，外部函数通常无权访问，当函数执行结束之后，存放在内存中的临时变量也随之被销毁。</li></ol><p>通过观察函数的<strong>生命周期</strong>和函数的<strong>资源分配</strong>情况，我们发现，它们都符合<strong>后进先出</strong> (LIFO) 的策略，所以我们选择<strong>栈</strong>（后进先出结构）来管理函数调用关系。</p><p>函数执行过程中，栈的变化如下：</p><img src="`+r+'" width="60%"><p>函数在执行过程中，其内部的临时变量会按照执行顺序被压入到栈中。</p><p>这种管理<code>函数调用关系</code>（过程）的栈结构称之为<strong>调用栈</strong>。</p><table><thead><tr><th>代码片段</th><th>执行结果</th><th>原因</th><th>备注</th></tr></thead><tbody><tr><td><img src="'+c+'"></td><td>栈溢出的错误</td><td>因为循环嵌套调用了 foo，导致栈无限增，进而导致栈溢出的错误</td><td></td></tr><tr><td><img src="'+i+'"></td><td>正常执行</td><td>因为 setTimeout 会使得 foo 函数在消息队列后面的任务中执行，所以不会影响到当前的栈结构。</td><td>涉及<strong>消息队列和事件循环系统</strong></td></tr><tr><td><img src="'+y+'"></td><td>页面卡死</td><td>在当前这一轮任务里不停地创建微任务，执行，创建，执行，创建……虽然不会爆栈，但也无法去执行下一个任务，主线程被卡死</td><td>涉及<strong>微任务和事件循环</strong></td></tr></tbody></table><p>用栈来管理函数的<strong>优势</strong>如下：</p><ol><li>栈的结构和非常适合函数调用过程。</li><li>在栈上分配资源和销毁资源的速度非常快，因为栈空间是连续的，分配空间和销毁空间只需要移动下指针就可以了</li></ol><p><strong>缺点</strong>：</p><ol><li>栈空间有限，容易导致<strong>栈溢出</strong></li><li>采用栈来存储相对基本类型更加复杂的对象数据，那么切换上下文(esp指针上下移)的开销将变得巨大</li></ol><h2 id="有了栈-为什么还要堆" tabindex="-1">有了栈，为什么还要堆？ <a class="header-anchor" href="#有了栈-为什么还要堆" aria-label="Permalink to &quot;有了栈，为什么还要堆？&quot;">​</a></h2><p>因为栈空间有一个重要的作用是用来切换执行上下文，所以栈空间一般不会设置太大。因此容易产生栈溢出的问题。</p><p>为了解决栈空间小导致的栈溢出的问题，所以使用<strong>堆空间</strong>。</p><p>存放在堆空间中的数据是<strong>不要求连续</strong>存放的。</p><table><thead><tr><th>代码片段</th><th>堆栈状态</th></tr></thead><tbody><tr><td><img src="'+F+'"></td><td><img src="'+D+`" width="80%"></td></tr></tbody></table><p>当使用 new 时，我们会在堆中分配一块空间，在堆中分配空间之后，会返回分配后的地址，我们会把该<strong>地址保存在栈</strong>中。</p><p>不过堆内存虽然空间大，能存放大量的数据，但与此同时<strong>垃圾内存的回收会带来更大的开销</strong>，在《垃圾回收机制》章节介绍了V8是如何进行垃圾回收的。</p><h1 id="闭包" tabindex="-1">闭包 🔔 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包 :bell:&quot;">​</a></h1><p>在 JavaScript 中，根据词法作用域的规则，内部函数总是可以访问其外部函数中声明的变量，当通过调用一个外部函数返回一个内部函数后，即使该外部函数已经执行结束了，但是内部函数引用外部函数的变量依然保存在内存中，我们就把这些变量的集合称为闭包。比如外部函数是 foo，那么这些变量的集合就称为 foo 函数的闭包。</p><p><code>闭包 = 函数 + 函数能够访问的自由变量</code></p><h2 id="延迟解析-v8如何实现闭包" tabindex="-1">延迟解析：V8如何实现闭包？ <a class="header-anchor" href="#延迟解析-v8如何实现闭包" aria-label="Permalink to &quot;延迟解析：V8如何实现闭包？&quot;">​</a></h2><p><strong>惰性解析</strong>：解析器在解析的过程中，如果遇到函数声明，那么会<strong>跳过</strong>函数内部的代码，并不会为其生成 AST 和字节码，而仅仅生成顶层代码的 AST 和字节码。</p><h3 id="预解析器如何解决闭包给惰性解析带来的问题" tabindex="-1">预解析器如何解决闭包给惰性解析带来的问题 <a class="header-anchor" href="#预解析器如何解决闭包给惰性解析带来的问题" aria-label="Permalink to &quot;预解析器如何解决闭包给惰性解析带来的问题&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">inner</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">d</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> f </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>如上面这段代码，inner函数调用了foo函数中的变量d，形成了闭包，这会带来两个问题：</p><ol><li>当 foo 执行结束时，变量 d 该不该被销毁？如果不应该被销毁，那么应该采用什么策略？</li><li>如果采用了惰性解析，那么当执行到 foo 函数时，V8 只会解析 foo 函数，并不会解析内部的 inner 函数，那么这时候 V8 就不知道 inner 函数中是否引用了 foo 函数的变量 d。</li></ol><p>正确的处理方式应该是foo 函数的执行上下文虽然被销毁了，但是 inner 函数引用的 foo 函数中的变量却不能被销毁。</p><p>V8用<strong>预解析器</strong>来实现了。当遇到了一个函数，预解析器会对该函数做一次快速的预解析：</p><ol><li>判断当前函数是不是存在一些语法上的错误</li><li>检查函数内部是否引用了外部变量，如果引用了外部的变量，预解析器会将栈中的变量复制到<strong>堆</strong>中，在下次执行到该函数的时候，直接使用堆中的引用。<strong>即便外部前函数执行结束之后，也不会释放该变量</strong>。</li></ol><hr><h1 id="什么是v8" tabindex="-1">什么是V8？ <a class="header-anchor" href="#什么是v8" aria-label="Permalink to &quot;什么是V8？&quot;">​</a></h1><p>V8 是一个由 Google 开发的开源 <code>JavaScript 引擎</code>，目前用在 Chrome 浏览器和 Node.js 中，其核心功能是执行 JavaScript 代码。</p><p>V8的宿主环境可以是<strong>浏览器</strong>、<strong>Node.js</strong>或者其他<strong>定制开发环境</strong></p><ul><li><strong>浏览器</strong>：为 V8 提供基础的消息循环系统、全局变量、<a href="https://developer.mozilla.org/en-US/docs/Web/API" target="_blank" rel="noreferrer">Web API</a>(即浏览器提供的一套操作浏览器功能和页面元素的接口)，</li><li><strong>Node.js</strong>：提供了不同的宿主对象和宿主的 API，但是整个流程依然是相同的，比如 Node.js 也会提供一套消息循环系统，也会提供一个运行时的主线程。</li></ul><p>而 V8 的核心是实现了 <code>ECMAScript</code>标准。V8提供了 ECMAScript 定义的一些对象和一些<strong>核心的函数</strong>，包括了 Object、Function、String。除此之外，V8 还提供了<strong>垃圾回收器</strong>、<strong>协程</strong>等基础内容，不过这些功能依然需要浏览器环境的配合才能完整执行。</p><img src="`+A+'" width="60%/"><h1 id="v8-如何执行-javascript-代码" tabindex="-1">V8 如何执行 JavaScript 代码？🔔 <a class="header-anchor" href="#v8-如何执行-javascript-代码" aria-label="Permalink to &quot;V8 如何执行 JavaScript 代码？:bell:&quot;">​</a></h1><p><a href="https://juejin.im/post/5d7f8651f265da03ea5aaf73" target="_blank" rel="noreferrer">参考链接</a></p><p>V8 采用混合编译执行和解释执行这两种手段，我们把这种混合使用编译器和解释器的技术称为 <code>JIT</code>（Just In Time）技术来执行JS代码。V8 执行 JavaScript 的流程图如下： <img src="'+C+'"><img src="'+g+`"></p><blockquote><p>eval()是全局对象的一个函数属性。会将传入的字符串当做 JavaScript 代码进行执行。</p></blockquote><p><strong>核心流程分为两步：</strong></p><ol><li><code>编译阶段</code>：将js代码转换为低级<strong>中间代码</strong>或者机器能够理解的<strong>机器代码</strong></li><li><code>执行阶段</code>：执行转换后的代码并输出执行结果</li></ol><blockquote><p>可以把 V8 看成是一个虚构出来的计算机，也称为虚拟机，虚拟机通过模拟实际计算机的各种功能来实现代码的执行，如模拟实际计算机的 CPU、堆栈、寄存器等，虚拟机还具有它自己的一套指令系统。</p></blockquote><blockquote><p>所以对于 js 代码来说，V8 就是它的整个世界，当 V8 执行 js 代码时，你并不需要担心现实中不同操作系统、体系结构计算机的差异，只需要按照虚拟机的规范写好代码就可以了。</p></blockquote><h2 id="第一步-编译阶段" tabindex="-1">第一步：编译阶段 <a class="header-anchor" href="#第一步-编译阶段" aria-label="Permalink to &quot;第一步：编译阶段&quot;">​</a></h2><ol><li><strong>准备基础环境</strong>：包括堆、栈空间，全局执行上文， 全局作用域，消息循环系统，内置函数等。</li><li><strong>分词/词法分析</strong>：这个过程是将由字符组成的字符串分解为有意义的代码块。</li><li><strong>解析/语法分析</strong> - <strong>解析器</strong>生成抽象语法树（AST）及作用域：V8不理解JS源码，需将其结构化到 <code>AST</code>（是便于V8理解的结构）。同时还会生成相关<code>作用域</code>。</li><li><strong>预解释/代码生成</strong> - 生成<strong>字节码</strong>（或二进制代码）。字节码是介于 AST 和机器代码的中间代码。（<strong>解释器</strong>可直接解释执行字节码，或者将字节码编译为二进制代码然后再执行。这个阶段会进行<code>变量的提升</code>）。</li></ol><h2 id="第二步-执行阶段" tabindex="-1">第二步：执行阶段 <a class="header-anchor" href="#第二步-执行阶段" aria-label="Permalink to &quot;第二步：执行阶段&quot;">​</a></h2><p>执行阶段有以下3部分工作：</p><ol><li>创建堆空间和栈空间</li><li>创建执行上下文和作用域</li><li>构建事件循环系统，并由执行代码</li></ol><blockquote><p>ps：</p><ol><li>解释器执行字节码：按照顺序解释执行字节码，并输出执行结果。</li><li>当解释器执行到热点代码（指被重复多次执行的代码）时，会优先执行被<strong>编译器</strong>编译成<strong>机器代码</strong>后的热点代码，以便提升代码的执行速度。</li></ol><ul><li>有一个D8工具(从V8源码编译出来的)，可以输出js代码的AST结构和作用域等。<code> d8 --print-ast test.js</code> 、<code>d8 --print-scopes test.js</code></li></ul></blockquote><ol><li><p><strong>创建堆空间和栈空间（栈溢出错误是什么？）</strong></p><p>在 Chrome 中，只要开启一个渲染进程，便会<strong>初始化 V8</strong>，同时初始化<strong>堆空间和栈空间</strong>。</p><blockquote><ul><li><strong>原生类型</strong>的数据存储在<strong>栈</strong>空间</li><li><strong>引用类型</strong>，诸如函数、数组，在浏览器中还有 window 对象、 document 对象等，这些都是存在<strong>堆</strong>空间</li></ul></blockquote><ul><li>内存堆（emory Heap）：分配内存地址</li><li>调用栈（Call Stack）：代码执行</li></ul><p><strong>栈空间</strong>主要是用来管理 JavaScript <strong>函数</strong>调用的</p><ul><li>栈是内存中<strong>连续</strong>的一块空间，同时栈结构是<strong>先进后出</strong>的策略</li><li><strong>函数</strong>调用过程中，涉及到<strong>上下文</strong>相关的内容都会存放在栈上 ，如<strong>原生类型</strong>引用到的对象的<strong>地址</strong>、函数的执行状态、this 值等都存在在栈上。</li><li>当一个函数执行<strong>结束</strong>，那么该函数的执行上下文便会被<strong>销毁</strong>掉。</li></ul><p><strong>关于栈溢出问题</strong><br> 栈空间的最大的特点是空间连续，因此栈空间的查找效率非常高，但是通常内存中，很难分配到一块很大的连续空间，因此，<strong>V8 对栈空间的 小做了限制</strong>， 如果函数调用层过深，那么 V8 就有可能抛出栈溢出的误。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">factorial</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">factorial</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">50000</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// VM68:1 Uncaught     RangeError: Maximum call stack size exceeded</span></span></code></pre></div><p><strong>堆空间</strong>是一种树形的存储结构，用来存储对象类型的<strong>离散</strong>的数据。引类型：诸如函数、数组，在浏览器中还有 window 对象、document对象等，这些都是 存在<strong>堆</strong>空间。还有全局上下文也是存在<strong>堆</strong>空间中的。</p><blockquote><p>堆、栈空间相关知识详解下面《内存管理机制》</p></blockquote></li><li><p><strong>创建执行上下文和作用域</strong></p><p>执行上下文中主要包含三部分，<strong>变量环境、词法环境、this关键字</strong>。</p><ul><li><code>this指向</code>：除开箭头函数的this是编辑阶段确定的之外，其他this都是在代码执行阶段【代码执行阶段 == 执行上下文创建阶段】确认的。</li><li><code>词法环境</code>：词法环境被用来存储函数声明和变量（<code>let 和 const</code>）绑定</li><li><code>变量环境</code>：变量环境也是一个词法环境，但不同的是词法环境被用来存储函数声明和变量（let 和 const）绑定，而变量环境只用来存储 <code>var</code> 变量绑定。</li></ul><p>比如在浏览器的环境中，<strong>全局执行上下文</strong>中就包括了</p><ul><li>window 对象，</li><li>默认指向 window 的 this 关键字</li><li>还有一些 Web API 函数，诸如 setTimeout、XMLHttpRequest 等内 容。</li><li>词法环境中，则包含了使用 let、const 等变量的内容。</li></ul><p>全局执行上下文在 V8 的生存周期内是不会被销毁的，它会一直保存在<strong>堆</strong>中。而函数的执行上下文在函数执行结束之后就会被销毁。</p><p><strong>函数执行上下文栈</strong>当 V8 调用了一个<code>函数</code>时，就会进入函数的执行上下文，这时候全局执行上下文 和 当前的函数执行上下文就形成了一个栈结构</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">show_x</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">bar</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">show_x</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">bar</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><img src="`+d+'" width="50%/"></li><li><p><strong>构建事件循环系统，并执行代码</strong></p><p>宿主环境(浏览器、Node.js)还需要为V8构造<strong>事件循环</strong>系统，事件循环系统主要用来处理任务的排队和任务的调度。</p></li></ol><blockquote><p>后续会详细介绍<strong>事件循环机制</strong></p></blockquote><h1 id="v8中的对象表示" tabindex="-1">V8中的对象表示 <a class="header-anchor" href="#v8中的对象表示" aria-label="Permalink to &quot;V8中的对象表示&quot;">​</a></h1><blockquote><p>参考文章：<a href="https://www.cnblogs.com/chargeworld/p/12236848.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/chargeworld/p/12236848.html</a></p></blockquote><ol><li>属性分为<strong>命名属性</strong>和<strong>可索引属性</strong>，命名属性存放在 <code>Properties</code> 中，可索引属性存放在 <code>Elements</code> 中。它们的区别主要体现在键名能否被索引</li><li>命名属性有三种不同的存储方式：<strong>对象内属性、快属性和慢属性</strong>，前两者通过<strong>线性</strong>查找进行访问，慢属性通过<strong>哈希存储</strong>的方式进行访问。</li><li>总是以相同的顺序初始化对象成员，能充分利用相同的隐藏类(用来描述命名属性是怎么存放的)，进而提高性能。</li><li>增加或删除可索引属性，不会引起隐藏类的变化，稀疏的可索引属性会退化为哈希存储。</li><li><code>delete</code> 操作可能会改变对象的结构，导致引擎将对象的存储方式降级为哈希表存储的方式，不利于 V8 的优化，应尽可能避免使用（当沿着属性添加的反方向删除属性时，对象不会退化为哈希存储）</li></ol><h1 id="二进制代码如何被cpu执行的" tabindex="-1">二进制代码如何被CPU执行的？ <a class="header-anchor" href="#二进制代码如何被cpu执行的" aria-label="Permalink to &quot;二进制代码如何被CPU执行的？&quot;">​</a></h1><ol><li>二进制代码装载进内存，系统会将第一条指令的地址写入到 PC 寄存器中。</li><li>读取指令：根据pc寄存器中地址，读取到第一条指令，并将pc寄存器中内容更新成下一条指令地址。</li><li>分析指令：并识别出不同的类型的指令，以及各种获取操作数的方法。</li><li>执行指令：由于cpu访问内存花费时间较长，因此cpu内部提供了通用寄存器，用来保存关键变量，临时数据等。指令包括加载指令，存储指令，更新指令，跳转指令。如果涉及加减运算，会额外让ALU进行运算。</li><li>指令完成后，通过pc寄存器取出下一条指令地址，并更新pc寄存器中内容，再重复以上步骤。</li></ol>',127),f=[u];function b(m,_,v,q,k,E){return n(),a("div",null,f)}const S=s(h,[["render",b]]);export{V as __pageData,S as default};
