import{_ as t,o,c as l,V as e}from"./chunks/framework.75331a37.js";const a="/assets/pic1.e5097e2f.png",i="/assets/pic3.813abe28.png",n="/assets/pic5.4aeb025d.png",s="/assets/pic6.17906b1a.png",b=JSON.parse('{"title":"HTTP/1","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/网络(2)-http1、2、3.md","filePath":"浏览器/网络(2)-http1、2、3.md"}'),r={name:"浏览器/网络(2)-http1、2、3.md"},T=e('<ul><li><a href="#http1">HTTP/1</a><ul><li><a href="#http09---单行协议">HTTP/0.9 - 单行协议</a></li><li><a href="#http10---构建可扩展性多文件状态码用户代理">HTTP/1.0 - 构建可扩展性（多文件，状态码，用户代理）</a></li><li><a href="#http11---标准化协议">HTTP1.1 - 标准化协议</a><ul><li><a href="#长链接">长链接</a></li><li><a href="#管线化并发连接--域名分片">管线化（并发连接 + 域名分片）</a><ul><li><a href="#管线化">管线化</a></li></ul></li><li><a href="#提供虚拟主机的支持---host请求头">提供虚拟主机的支持 - host请求头</a></li><li><a href="#支持响应分块---断点续传">支持响应分块 - 断点续传</a><ul><li><a href="#断点续传">断点续传</a></li></ul></li><li><a href="#以及其他http11特性内容协商缓存cookie安全机制">以及其他HTTP/1.1特性（内容协商，缓存，cookie安全机制）</a></li><li><a href="#http11的瓶颈">HTTP/1.1的瓶颈</a></li></ul></li></ul></li><li><a href="#http20">HTTP/2.0</a><ul><li><a href="#二进制分帧--多路复用">二进制分帧 + 多路复用</a></li><li><a href="#http20其他特性设置请求优先级服务器推送头部压缩">HTTP/2.0其他特性：设置请求优先级、服务器推送、头部压缩</a></li></ul></li><li><a href="#http30">HTTP/3.0</a></li></ul><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP" target="_blank" rel="noreferrer">HTTP 的发展(from MDN) </a></p></blockquote><h1 id="http-1" tabindex="-1">HTTP/1 <a class="header-anchor" href="#http-1" aria-label="Permalink to &quot;HTTP/1&quot;">​</a></h1><h2 id="http-0-9-单行协议" tabindex="-1">HTTP/0.9 - 单行协议 <a class="header-anchor" href="#http-0-9-单行协议" aria-label="Permalink to &quot;HTTP/0.9 - 单行协议&quot;">​</a></h2><p>HTTP/0.9 是于 1991 年提出的，主要用于学术交流，需求很简单——用来在网络之间传递 HTML 超文本的内容，所以被称为<strong>超文本传输协议</strong>。只能实现<code>GET</code>请求。</p><p>HTTP/0.9 的一个完整的请求流程如下：（可参考下图）</p><ul><li>因为 HTTP 都是基于 TCP 协议的，所以客户端先要根据 <strong>IP 地址</strong>(DNS解析)、端口和服务器建立 TCP 连接，而建立连接的过程就是 <code>TCP 协议三次握手</code>的过程。</li><li>建立好连接之后，会发送一个 GET 请求行的信息，如GET /index.html用来获取 index.html。</li><li>服务器接收请求信息之后，读取对应的 HTML 文件，并将数据以 ASCII 字符流返回给客户端。</li><li>HTML 文档传输完成后，断开连接。</li></ul><img src="'+a+'"><p><strong>HTTP/0.9的特点:</strong></p><ul><li>第一个是只有一个请求行，并<strong>没有 HTTP 请求头和请求体</strong>，因为只需要一个请求行就可以完整表达客户端的需求了。</li><li>第二个是服务器也<strong>没有返回头信息</strong>，这是因为服务器端并不需要告诉客户端太多信息，只需要返回数据就可以了。</li><li>第三个是返回的文件内容是以 <strong>ASCII</strong> 字符流来传输的，因为都是 HTML 格式的文件，所以使用 ASCII 字节码来传输是最合适的。</li></ul><h2 id="http-1-0-构建可扩展性-多文件-状态码-用户代理" tabindex="-1">HTTP/1.0 - 构建可扩展性（多文件，状态码，用户代理） <a class="header-anchor" href="#http-1-0-构建可扩展性-多文件-状态码-用户代理" aria-label="Permalink to &quot;HTTP/1.0 - 构建可扩展性（多文件，状态码，用户代理）&quot;">​</a></h2><p>随着万维网的发展，在浏览器中展示的不单是 HTML 文件了，还包括了 JavaScript、CSS、图片、音频、视频等不同类型的文件。因此<strong>支持多种类型的文件下载</strong>是 HTTP/1.0 的一个<code>核心诉求</code>，而且文件格式不仅仅局限于 ASCII 编码，还有很多<strong>其他类型编码的文件</strong>。</p><p>HTTP/0.9 在建立好连接之后，只会发送类似GET /index.html的简单请求命令，并没有其他途径告诉服务器更多的信息，如文件编码、文件类型等。同样，服务器是直接返回数据给浏览器的，也没有其他途径告诉浏览器更多的关于服务器返回的文件信息。</p><p>所以在HTTP/1.0 引入了<strong>请求头和响应头</strong>，它们都是以为 Key-Value 形式保存的，在 HTTP 发送请求时，会带上请求头信息，服务器返回数据时，会先返回响应头信息。</p><p><strong>HTTP/1.0的请求过程如下：</strong><img src="'+i+`"></p><p><strong>HTTP/1.0 是怎么通过请求头和响应头来支持多种不同类型的数据呢？</strong></p><p>在发起请求时候会通过 HTTP 请求头告诉服务器它期待服务器返回什么类型的文件、采取什么形式的压缩、提供什么语言的文件以及文件的具体编码。最终发送出来的请求头内容如下：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">accept: text/html</span></span>
<span class="line"><span style="color:#A6ACCD;">accept-encoding: gzip, deflate, br</span></span>
<span class="line"><span style="color:#A6ACCD;">accept-Charset: ISO-8859-1,utf-8</span></span>
<span class="line"><span style="color:#A6ACCD;">accept-language: zh-CN,zh</span></span></code></pre></div><p>服务器接收到浏览器发送过来的请求头信息之后，会根据请求头的信息来准备响应数据。不过有时候会有一些意外情况发生，比如浏览器请求的压缩类型是 gzip，但是服务器不支持 gzip，只支持 br 压缩，那么它会通过响应头中的 content-encoding 字段告诉浏览器最终的压缩类型，也就是说最终浏览器需要根据响应头的信息来处理数据。下面是一段响应头的数据信息：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">content-encoding: br</span></span>
<span class="line"><span style="color:#A6ACCD;">content-type: text/html; charset=UTF-8</span></span></code></pre></div><p><strong>基于请求头和响应头，HTTP/1.0的特点如下:</strong></p><ul><li>对<strong>多类型文件</strong>提供良好的支持</li><li>引入了<strong>状态码</strong>，告诉浏览器服务器最终处理该请求的情况</li><li>请求头中加入了<strong>用户代理</strong>字段，用于表示客户端的基础信息</li></ul><h2 id="http1-1-标准化协议" tabindex="-1">HTTP1.1 - 标准化协议 <a class="header-anchor" href="#http1-1-标准化协议" aria-label="Permalink to &quot;HTTP1.1 - 标准化协议&quot;">​</a></h2><h3 id="长链接" tabindex="-1">长链接 <a class="header-anchor" href="#长链接" aria-label="Permalink to &quot;长链接&quot;">​</a></h3><p>长链接是指，在一个 TCP 连接上可以传输多个 HTTP 请求，只要浏览器或者服务器没有明确断开连接，那么该 TCP 连接会一直保持。</p><blockquote><p>目前浏览器中对于同一个域名，默认允许同时建立 <code>6</code> 个 TCP 持久连接。</p></blockquote><p>在HTTP/1.0中默认使用短连接。从HTTP/1.1起，默认使用长连接</p><p>会在响应头加入这行代码：<code>Connection:keep-alive</code></p><p>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><p>HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。</p><h3 id="管线化-并发连接-域名分片" tabindex="-1">管线化（并发连接 + 域名分片） <a class="header-anchor" href="#管线化-并发连接-域名分片" aria-label="Permalink to &quot;管线化（并发连接 + 域名分片）&quot;">​</a></h3><p>允许在第一个应答被完全发送之前就发送第二个请求，以降低通信延迟。试图通过管线化的技术来解决<strong>队头阻塞</strong>的问题。</p><blockquote><p><strong>队头阻塞</strong>问题：如果 TCP 通道中的某个请求因为某些原因没有及时返回，那么就会阻塞后面的所有请求</p></blockquote><h4 id="管线化" tabindex="-1">管线化 <a class="header-anchor" href="#管线化" aria-label="Permalink to &quot;管线化&quot;">​</a></h4><ul><li>在使用持久连接的情况下，某个连接上的消息传递类似于： <ul><li>请求1 --&gt; 响应1 --&gt; 请求2 --&gt; 响应2 --&gt; 请求3 --&gt; 响应3</li></ul></li><li>管线化的连接消息传递是类似于： <ul><li>请求1 --&gt; 请求2 --&gt; 请求3 --&gt; 响应1 --&gt; 响应2 --&gt; 响应3</li><li>相当于客户端<strong>一次性把所有的请求打包</strong>发送给服务端，同时服务端也一次性打包将所有的返回回传回来</li><li>只有GET和HEAD请求可以进行管线化，而POST有所限制</li><li>管线化是通过持久连接完成的，且只有http / 1.1 版本支持</li></ul></li></ul><h3 id="提供虚拟主机的支持-host请求头" tabindex="-1">提供虚拟主机的支持 - host请求头 <a class="header-anchor" href="#提供虚拟主机的支持-host请求头" aria-label="Permalink to &quot;提供虚拟主机的支持 - host请求头&quot;">​</a></h3><p>HTTP/1.1 的请求头中增加了 <code>Host</code> 字段，用来表示当前的<strong>域名地址</strong>，这样服务器就可以根据不同的 Host 值做不同的处理。</p><h3 id="支持响应分块-断点续传" tabindex="-1">支持响应分块 - 断点续传 <a class="header-anchor" href="#支持响应分块-断点续传" aria-label="Permalink to &quot;支持响应分块 - 断点续传&quot;">​</a></h3><p>引入 <code>Chunk transfer 机制(分块传输编码)</code>，实现大文件传输（<strong>断点续传</strong>）。服务器会将数据分割成若干个任意大小的数据块，每个数据块发送时会附上上个数据块的长度，最后使用一个零长度的块作为发送数据完成的标志。这样就提供了对动态内容的支持。</p><h4 id="断点续传" tabindex="-1">断点续传 <a class="header-anchor" href="#断点续传" aria-label="Permalink to &quot;断点续传&quot;">​</a></h4><p>断点续传就是从文件上次<code>中断</code>的地方开始重新下载或上传。</p><p><strong>实现原理</strong></p><ol><li>将一个文件按照一定的规则人为的<code>分割</code>成多个小文件</li><li>每次客户端上传文件片前先获取已上传的文件位置，确定本次应切割的位置</li><li>每次上传完成后更新已上传文件大小的记录</li><li>服务器接收到上传过来的小文件后根据一定的规则来组合这些小文件</li><li>如果在上传过程中出现网络中断等意外情况，下次再次上传时可以从已经上传的部分继续上传，而不是重新上传。</li></ol><p><strong>http中实现</strong></p><p>断点续传技术在http1.1中开始得到支持，通过在Header 里添加两个参数来实现的<code>Range</code>和<code>Content-Range</code>。</p><ul><li><code>Range</code>用于<code>请求头</code>，指定本次请求上传或下载的第一个节点的位置和最后一个节点的位置</li><li><code>Content-Range</code>用于<code>响应头</code>，指定整个实体中的一部分的插入位置，他也指示了整个实体的长度。在服务器向客户返回一个部分响应，它必须描述响应覆盖的范围和整个实体长度。</li></ul><p>HTTP协议本身不支持断点上传，需要自己实现。</p><ul><li><code>Range</code> 用于指定第一个字节和最后一个字节的位置，格式如下： <code>Range:(unit=first byte pos)-[last byte pos]</code></li><li><code>Content-Range</code> 表示的是当前发送的数据的范围，用于响应带有 Range 的请求。服务器会将 Content-Range 添加在响应的头部,格式如下： <code>Content-Range:bytes 2048-4096/10240</code> 这里边 2048-4096 表示当前发送的数据范围， 10240 表示文件总大小。</li></ul><p><strong>举个🌰：</strong></p><ol><li>客户端下载一个1024K的文件，已经下载了其中512K</li><li>网络中断，客户端请求续传，因此需要在HTTP头中申明本次需要续传的片段： Range:bytes=512000- 这个头通知服务端从文件的512K位置开始传输文件</li><li>服务端收到断点续传请求，从文件的512K位置开始传输，并且在HTTP头中增加： Content-Range:bytes 512000-/1024000 这个头表示此次传输的文件是从512k位置开始直到最后结束，并且文件总大小是1024k 并且此时服务端返回的HTTP状态码应该是<code>206</code>，而不是200。</li></ol><h3 id="以及其他http-1-1特性-内容协商-缓存-cookie安全机制" tabindex="-1">以及其他HTTP/1.1特性（内容协商，缓存，cookie安全机制） <a class="header-anchor" href="#以及其他http-1-1特性-内容协商-缓存-cookie安全机制" aria-label="Permalink to &quot;以及其他HTTP/1.1特性（内容协商，缓存，cookie安全机制）&quot;">​</a></h3><ul><li>引入<strong>内容协商机制</strong>，包括语言、编码、类型等。并允许客户端和服务器之间约定以最合适的内容进行交换。</li><li>提供了 <strong>缓存机制</strong>，用来缓存已经下载过的数据</li><li><strong>客户端 Cookie、安全机制</strong></li></ul><h3 id="http-1-1的瓶颈" tabindex="-1">HTTP/1.1的瓶颈 <a class="header-anchor" href="#http-1-1的瓶颈" aria-label="Permalink to &quot;HTTP/1.1的瓶颈&quot;">​</a></h3><p>由于</p><ol><li>TCP的慢启动，</li><li>同时开启了多条 TCP 连接，那么这些连接会竞争固定的带宽</li><li>HTTP/1.1 队头阻塞的问题 会导致HTTP/1.1对<strong>带宽的利用率却并不理想</strong>。很难将带宽用满。</li></ol><h1 id="http-2-0" tabindex="-1">HTTP/2.0 <a class="header-anchor" href="#http-2-0" aria-label="Permalink to &quot;HTTP/2.0&quot;">​</a></h1><p>HTTP/2.0在HTTP/1.0的基础上，做了以下几点优化：</p><ol><li>多路复用</li><li>设置请求优先级</li><li>服务器推送</li><li>头部压缩</li></ol><h2 id="二进制分帧-多路复用" tabindex="-1">二进制分帧 + 多路复用 <a class="header-anchor" href="#二进制分帧-多路复用" aria-label="Permalink to &quot;二进制分帧 + 多路复用&quot;">​</a></h2><p><strong>队头阻塞</strong>，其根本原因在于HTTP 基于请求-响应的模型，在同一个 TCP 长连接中，前面的请求没有得到响应，后面的请求就会被阻塞。</p><p>HTTP1.1用<code>并发连接</code>和<code>域名分片</code>的方式来解决这个问题，但这并没有真正从 HTTP 本身的层面解决问题，只是增加了 TCP 连接。</p><p>为了解决该问题，HTTP/2.0使用了<strong>多路复用机制</strong>。</p><p>通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输的序列，也叫做流(Stream)。HTTP/2 用流来在一个 TCP 连接上来进行多个数据帧的通信，这就是<strong>多路复用</strong>的概念。</p><img src="`+n+'" width="45%/"><p><strong>二进制分帧 + 多路复用</strong>过程如下：</p><ol><li>首先，浏览器准备好请求数据，包括了请求行、请求头等信息，如果是 POST 方法，那么还要有请求体。</li><li>这些数据经过二进制分帧层处理之后，会被转换为一个个带有请求 <code>ID</code> 编号的帧，通过协议栈将这些帧发送给服务器。所以这些帧是可以<code>交错传输</code>。</li><li>服务器接收到所有帧之后，会将所有相同 ID 的帧合并为一条完整的请求信息。</li><li>然后服务器处理该条请求，并将处理的响应行、响应头和响应体分别发送至二进制分帧层。</li><li>同样，二进制分帧层会将这些响应数据转换为一个个带有请求 ID 编号的帧，经过协议栈发送给浏览器。</li><li>浏览器接收到响应帧之后，会根据 ID 编号将帧的数据提交给对应的请求。</li></ol><p><strong>多路复用</strong>是通过在协议栈中添加<code>二进制分帧层</code>来实现的，有了二进制分帧层还能够实现请求的<strong>优先级、服务器推送、头部压缩</strong>等特性，从而大大提升了文件传输效率。</p><h2 id="http-2-0其他特性-设置请求优先级、服务器推送、头部压缩" tabindex="-1">HTTP/2.0其他特性：设置请求优先级、服务器推送、头部压缩 <a class="header-anchor" href="#http-2-0其他特性-设置请求优先级、服务器推送、头部压缩" aria-label="Permalink to &quot;HTTP/2.0其他特性：设置请求优先级、服务器推送、头部压缩&quot;">​</a></h2><ol><li><strong>可以设置请求的优先级</strong>：可以在发送请求时，标上该请求的优先级，这样服务器接收到请求之后，会优先处理优先级高的请求。</li><li><strong>服务器推送</strong>：在 HTTP/2 当中，服务器已经不再是完全被动地接收请求，响应请求。当 TCP 连接建立之后，比如浏览器请求一个 HTML 文件，服务器就可以在返回 HTML 的基础上，将 HTML 中引用到的其他资源文件一起返回给客户端，减少客户端的等待。</li><li><strong>头部压缩</strong>：HTTP/2 针对头部字段，也采用了对应的压缩算法——<code>HPACK</code>，对请求头进行压缩。 <ul><li>首先是在服务器和客户端之间建立<code>哈希表</code>，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把<code>索引</code>(比如0，1，2，...)传给对方即可，对方拿到索引查表就行了。这种<code>传索引</code>的方式，可以说让请求头字段得到极大程度的精简和复用。</li><li>其次是对于整数和字符串进行<code>哈夫曼编码</code>，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让<strong>出现次数多的字符对应的索引尽可能短</strong>，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率。</li></ul></li></ol><blockquote><p>HTTP/2 在 2018 年就开始得到了大规模的应用</p></blockquote><h1 id="http-3-0" tabindex="-1">HTTP/3.0 <a class="header-anchor" href="#http-3-0" aria-label="Permalink to &quot;HTTP/3.0&quot;">​</a></h1><p>虽然 HTTP/2 解决了应用层面的队头阻塞问题，不过和 HTTP/1.1 一样，HTTP/2 依然是基于 TCP 协议的，而 TCP 最初就是为了单连接而设计的。</p><p>如果在数据传输的过程中，有一个数据因为网络故障或者其他原因而丢包了，那么整个 TCP 的连接就会处于<strong>暂停状态</strong>，需要等待丢失的数据包被重新传输过来。把这种现象称为<strong>TCP 上的队头阻塞。</strong></p><p>基于TCP协议对HTTP/2.0会面临以下问题：</p><ol><li>TCP的队头阻塞</li><li>TCP建立连接的延时</li><li>TCP协议的僵化</li></ol><p>所以为了解决以上问题，HTTP/3.0选择UDP协议，基于 UDP 实现了类似于 TCP 的多路数据流、传输可靠性等功能，我们把这套功能称为 QUIC 协议。关于 HTTP/2 和 HTTP/3 协议栈的比较，可以参考下图：</p><img src="'+s+'" width="50%/"><p>HTTP/3 中的 QUIC 协议集合了以下几点功能。</p><ol><li>实现了类似 <strong>TCP 的流量控制、传输可靠性的功能</strong>。虽然 UDP 不提供可靠性的传输，但 QUIC 在 UDP 的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些 TCP 中存在的特性。</li><li>集成了 <strong>TLS 加密功能</strong>。目前 QUIC 使用的是 TLS1.3，相较于早期版本 TLS1.3 有更多的优点，其中最重要的一点是减少了握手所花费的 RTT 个数。</li><li>实现了 HTTP/2 中的<strong>多路复用功能</strong>。和 TCP 不同，QUIC 实现了在同一物理连接上可以有多个独立的逻辑数据流（如下图）。实现了数据流的单独传输，就解决了 TCP 中队头阻塞的问题。</li><li>实现了<strong>快速握手功能</strong>。由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。</li></ol><blockquote><p>2019年9月，HTTP/3支持已添加到Cloudflare和Google Chrome（Canary build）。Firefox Nightly在2019年秋季之后添加支持。[4]</p><p>2022年6月6日，IETF正式标准化HTTP/3为RFC9114[5]。</p></blockquote>',80),p=[T];function c(h,d,g,P,u,H){return o(),l("div",null,p)}const f=t(r,[["render",c]]);export{b as __pageData,f as default};
