import{_ as e,o as t,c as r,a}from"./app.e1f76b92.js";const s="/assets/1.c97d05ab.png",n="/assets/2.6732e1ff.jpeg",i="/assets/LC54.d0c9d177.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"顺/逆时针旋转矩阵","slug":"顺-逆时针旋转矩阵","link":"#顺-逆时针旋转矩阵","children":[]},{"level":2,"title":"矩阵的螺旋遍历","slug":"矩阵的螺旋遍历","link":"#矩阵的螺旋遍历","children":[]}],"relativePath":"算法/数组/二维数组花式遍历技巧/index.md"}'),o={name:"算法/数组/二维数组花式遍历技巧/index.md"},c=a('<h2 id="顺-逆时针旋转矩阵" tabindex="-1">顺/逆时针旋转矩阵 <a class="header-anchor" href="#顺-逆时针旋转矩阵" aria-hidden="true">#</a></h2><p><strong>解题思路</strong>： (以顺时针旋转 90 度为例)</p><ol><li>我们可以先将 n x n 矩阵 matrix 按照左上到右下的对角线进行镜像对称</li><li>然后再对矩阵的每一行进行反转</li></ol><img src="'+s+'"><p>如果是逆时针旋转 90 度，则 <img src="'+n+'"></p><p>LC.48 <a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noreferrer">旋转图像</a></p><h2 id="矩阵的螺旋遍历" tabindex="-1">矩阵的螺旋遍历 <a class="header-anchor" href="#矩阵的螺旋遍历" aria-hidden="true">#</a></h2><p>思路： <img src="'+i+'"></p><p>LC.54 <a href="https://leetcode.cn/problems/spiral-matrix/" target="_blank" rel="noreferrer">螺旋矩阵</a></p>',9),l=[c];function _(d,p,h,m,f,g){return t(),r("div",null,l)}const b=e(o,[["render",_]]);export{u as __pageData,b as default};
