import{_ as s,o as a,c as n,V as p}from"./chunks/framework.75331a37.js";const l="/assets/git1.e2f7b3dd.png",e="/assets/git2.21183095.png",o="/assets/git3.fce0022f.png",t="/assets/update-process.440eff44.png",b=JSON.parse('{"title":"流程概览","description":"","frontmatter":{},"headers":[],"relativePath":"前端框架/React/React核心原理/React核心原理3-状态更新.md","filePath":"前端框架/React/React核心原理/React核心原理3-状态更新.md"}'),c={name:"前端框架/React/React核心原理/React核心原理3-状态更新.md"},r=p('<ul><li><a href="#流程概览">流程概览</a></li><li><a href="#心智模式同步并发更新react">心智模式（同步，并发更新React）</a></li><li><a href="#触发状态更新update分类">触发状态更新，Update分类</a></li><li><a href="#update-exclamation">Update ❗</a><ul><li><a href="#update的结构">Update的结构</a></li><li><a href="#update与fiber的联系---updatequeue">Update与Fiber的联系 - updateQueue</a></li><li><a href="#updatequeue">updateQueue</a></li><li><a href="#例子star">例子⭐</a></li></ul></li><li><a href="#调度更新深入理解优先级">调度更新，深入理解优先级</a><ul><li><a href="#如何保证update不丢失">如何保证Update不丢失</a></li><li><a href="#如何保证状态依赖的连续性">如何保证状态依赖的连续性</a></li></ul></li><li><a href="#reactdomrender">ReactDOM.render</a></li><li><a href="#thissetstate">this.setState</a></li></ul><blockquote><p><a href="https://react.iamkasong.com/state/prepare.html#%E5%87%A0%E4%B8%AA%E5%85%B3%E9%94%AE%E8%8A%82%E7%82%B9" target="_blank" rel="noreferrer">状态更新</a></p></blockquote><p>本节我们介绍<code>ClassComponent与HostRoot</code>的Update原理，<code>FunctionComponent</code>对应的Update在《Hooks章节》介绍</p><h1 id="流程概览" tabindex="-1">流程概览 <a class="header-anchor" href="#流程概览" aria-label="Permalink to &quot;流程概览&quot;">​</a></h1><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">触发状态更新（根据场景调用不同的方法，类组件有：</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">render</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">setState</span><span style="color:#89DDFF;">`</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 函数组件有：</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">useState</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">）</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">    v</span></span>\n<span class="line"><span style="color:#A6ACCD;">创建Update对象（接下来三节详解，是React响应机制的关键）</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">    v</span></span>\n<span class="line"><span style="color:#A6ACCD;">从fiber到root（</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">markUpdateLaneFromFiberToRoot</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">， 即从触发状态更新的fiber一直向上遍历到rootFiber，并返回rootFiber。）</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">    v</span></span>\n<span class="line"><span style="color:#A6ACCD;">调度更新（</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">ensureRootIsScheduled</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">，即通知Scheduler调度器根据更新的优先级，决定以同步还是异步的方式调度本次更新。）</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">    v</span></span>\n<span class="line"><span style="color:#A6ACCD;">render阶段（</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">performSyncWorkOnRoot</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">performConcurrentWorkOnRoot</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">）</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">    v</span></span>\n<span class="line"><span style="color:#A6ACCD;">commit阶段（</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">commitRoot</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">）</span></span></code></pre></div><h1 id="心智模式-同步-并发更新react" tabindex="-1">心智模式（同步，并发更新React） <a class="header-anchor" href="#心智模式-同步-并发更新react" aria-label="Permalink to &quot;心智模式（同步，并发更新React）&quot;">​</a></h1><p>将<strong>更新机制</strong>类比<strong>代码版本控制</strong>。</p><ul><li><p>同步更新React：如果线上有个紧急bug需要修复(红色节点)，必须先将之前的代码提交。没有优先级的概念 <img src="'+l+'"></p></li><li><p>并发更新React：紧急线上bug需要修复时，我们暂存当前分支的修改，在master分支修复bug并紧急上线。然后开发分支基于修复bug的版本继续开发。</p><figure class="third"><img src="'+e+'" width="50%"><img src="'+o+`" width="50%"></figure><p>待高优更新完成后，<code>低优更新</code>基于<code>高优更新的结果</code>重新更新。</p></li></ul><h1 id="触发状态更新-update分类" tabindex="-1">触发状态更新，Update分类 <a class="header-anchor" href="#触发状态更新-update分类" aria-label="Permalink to &quot;触发状态更新，Update分类&quot;">​</a></h1><p>我们将可以<strong>触发更新的方法</strong>所隶属的组件分类：</p><ul><li>ReactDOM.render —— HostRoot</li><li>this.setState —— ClassComponent</li><li>this.forceUpdate —— ClassComponent</li><li>useState —— FunctionComponent</li><li>useReducer —— FunctionComponent</li></ul><p>一共三种组件（<code>HostRoot | ClassComponent | FunctionComponent</code>）可以触发更新。</p><p>由于不同类型组件工作方式不同，所以存在<strong>两种不同结构的Update</strong></p><ul><li>其中<code>ClassComponent与HostRoot</code>共用一套Update结构</li><li><code>FunctionComponent</code>单独使用一种Update结构。</li></ul><p>虽然他们的结构不同，但是他们工作机制与工作流程大体相同。在本节我们介绍前一种Update（即<code>ClassComponent与HostRoot</code>），<code>FunctionComponent</code>对应的Update在《Hooks章节》介绍</p><h1 id="update" tabindex="-1">Update ❗ <a class="header-anchor" href="#update" aria-label="Permalink to &quot;Update :exclamation:&quot;">​</a></h1><h2 id="update的结构" tabindex="-1">Update的结构 <a class="header-anchor" href="#update的结构" aria-label="Permalink to &quot;Update的结构&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Update</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">*</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  eventTime</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 任务时间，通过performance.now()获取的毫秒数。</span></span>
<span class="line"><span style="color:#A6ACCD;">  lane</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 优先级相关字段。</span></span>
<span class="line"><span style="color:#A6ACCD;">  suspenseConfig</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Suspense相关，暂不关注。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> UpdateState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 更新的类型，包括UpdateState | ReplaceState | ForceUpdate | CaptureUpdate。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 更新挂载的数据，不同类型组件挂载的数据不同。对于ClassComponent，payload为this.setState的第一个传参。对于HostRoot，payload为ReactDOM.render的第一个传参。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 更新的回调函数。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">next</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 与其他Update连接形成链表。</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="update与fiber的联系-updatequeue" tabindex="-1">Update与Fiber的联系 - updateQueue <a class="header-anchor" href="#update与fiber的联系-updatequeue" aria-label="Permalink to &quot;Update与Fiber的联系 - updateQueue&quot;">​</a></h2><p>Update存在一个连接其他Update形成<strong>链表</strong>的字段next。</p><p>联想到React中另一种以<strong>链表</strong>形式组成的结构<code>Fiber</code>。</p><p>从《fiber架构-双缓存机制》一节我们知道，Fiber节点组成Fiber树，页面中最多同时存在两棵Fiber树：</p><ul><li>代表当前页面状态的<code>current Fiber</code>树</li><li>代表正在<code>render阶段</code>的<code>workInProgress Fiber</code>树</li></ul><p>类似Fiber节点组成Fiber树，Fiber节点上的<strong>多个Update</strong>会组成<strong>链表</strong>并被包含在<code>fiber.updateQueue</code>中。</p><blockquote><p>什么情况下一个Fiber节点会存在多个Update？ 比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">onClick</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">setState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>在一个ClassComponent中触发this.onClick方法，方法内部调用了两次this.setState。这会在该fiber中产生两个<code>Update</code>。</p></blockquote><p>Fiber节点最多同时存在<strong>两个updateQueue</strong>：</p><ul><li><code>current fiber</code>保存的updateQueue即<code>current updateQueue</code></li><li><code>workInProgress fiber</code>保存的updateQueue即<code>workInProgress updateQueue</code></li></ul><p>在commit阶段完成页面渲染后，workInProgress Fiber树变为current Fiber树，workInProgress Fiber树内Fiber节点的updateQueue就变成current updateQueue。</p><h2 id="updatequeue" tabindex="-1">updateQueue <a class="header-anchor" href="#updatequeue" aria-label="Permalink to &quot;updateQueue&quot;">​</a></h2><p><code>ClassComponent与HostRoot</code>使用的UpdateQueue结构如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> queue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">memoizedState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 本次更新前该Fiber节点的state，Update基于该state计算更新后的state</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 本次更新前该Fiber节点已保存的Update。以链表形式存在，链表头为firstBaseUpdate，链表尾为lastBaseUpdate。之所以在更新产生前该Fiber节点内就存在Update，是由于某些Update优先级较低所以在上次render阶段由Update计算state时被跳过。</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">shared</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pending</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 触发更新时，产生的Update会保存在shared.pending中形成单向环状链表。当由Update计算state时这个环会被剪开并连接在lastBaseUpdate后面</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">effects</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 数组。保存update.callback !== null的Update。</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="例子" tabindex="-1">例子⭐ <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子:star:&quot;">​</a></h2><p>假设有一个fiber刚经历<code>commit</code>阶段完成渲染。 该fiber上有两个由于优先级过低所以在上次的render阶段并没有处理的Update。他们会成为下次更新的<code>baseUpdate</code>。 我们称其为u1和u2，其中<code>u1.next === u2</code>。</p><p>此时的<code>fiber.updateQueue</code>如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">updateQueue: UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> u2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>现在我们在fiber上<strong>触发两次状态更新</strong>，这会先后产生两个新的<strong>Update</strong>，我们称为<code>u3和u4</code>。</p><p>每个 update 都会通过 <code>enqueueUpdate</code> 方法<strong>插入到 <code>updateQueue</code> 队列</strong>上</p><p>按顺序插入u3和u4之后的<code>fiber.updateQueue</code>如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">updateQueue: UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> u2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">firstBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">lastBaseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">shared</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pending</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u4 ──</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> u3 </span><span style="color:#676E95;font-style:italic;">// shared.pending 会保证始终指向最后一个插入的update</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                              </span></span>
<span class="line"><span style="color:#A6ACCD;">             └──────┘</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>更新调度完成后进入**<code>render</code>阶段**。此时shared.pending的环被剪开并连接在updateQueue.lastBaseUpdate后面</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">updateQueue: UpdateQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> u1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> u2 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> u3 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> u4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>接下来遍历<code>updateQueue.baseUpdate</code>链表，以fiber.updateQueue.baseState为初始state，依次与遍历到的每个Update计算并产生<code>新的state</code>（该操作类比Array.prototype.reduce）。</p><p>在遍历时如果有优先级低的Update会被跳过。</p><p>当遍历完成后获得的state，就是该Fiber节点在本次更新的state（源码中叫做memoizedState）。</p><p>state的变化在render阶段产生与上次更新不同的JSX对象，通过<strong>Diff算法</strong>产生effectTag，在<strong>commit阶段</strong>渲染在页面上。</p><p>渲染完成后<code>workInProgress Fiber</code>树变为<code>current Fiber</code>树，整个更新流程结束。</p><h1 id="调度更新-深入理解优先级" tabindex="-1">调度更新，深入理解优先级 <a class="header-anchor" href="#调度更新-深入理解优先级" aria-label="Permalink to &quot;调度更新，深入理解优先级&quot;">​</a></h1><p>React根据<strong>人机交互研究的结果</strong>中用户对交互的预期顺序为交互产生的状态更新赋予不同优先级。</p><p>具体如下：</p><ol><li>生命周期方法：同步执行。</li><li>受控的用户输入：比如输入框内输入文字，同步执行。</li><li>交互事件：比如动画，高优先级执行。</li><li>其他：比如数据请求，低优先级执行。</li></ol><p>每当需要调度任务时，React会调用<code>Scheduler（调度器）</code>提供的方法runWithPriority。该方法接收一个优先级常量与一个回调函数作为参数。回调函数会以优先级高低为顺序排列在一个定时器中并在合适的时间触发。</p><p>比如： <img src="`+t+`"></p><h2 id="如何保证update不丢失" tabindex="-1">如何保证Update不丢失 <a class="header-anchor" href="#如何保证update不丢失" aria-label="Permalink to &quot;如何保证Update不丢失&quot;">​</a></h2><p>在render阶段，<code>shared.pending</code>的环被剪开并连接在<code>updateQueue.lastBaseUpdate</code>后面。</p><p>实际上<code>shared.pending</code>会被同时连接在<code>workInProgress updateQueue.lastBaseUpdate</code>与<code>current updateQueue.lastBaseUpdate</code>后面。</p><p>当<code>render</code>阶段被中断后重新开始时，会基于<code>current updateQueue</code>克隆出workInProgress updateQueue。由于<code>current updateQueue.lastBaseUpdate已</code>经保存了上一次的Update，所以不会丢失。</p><p>当<code>commit</code>阶段完成渲染，由于<code>workInProgress updateQueue.lastBaseUpdate中</code>保存了上一次的Update，所以 workInProgress Fiber树变成current Fiber树后也不会造成Update丢失。</p><h2 id="如何保证状态依赖的连续性" tabindex="-1">如何保证状态依赖的连续性 <a class="header-anchor" href="#如何保证状态依赖的连续性" aria-label="Permalink to &quot;如何保证状态依赖的连续性&quot;">​</a></h2><p>当某个Update由于优先级低而被跳过时，保存在<code>baseUpdate</code>中的不仅是该Update，还包括链表中该Update之后的所有Update。</p><p>例如： 其中字母代表该Update要在页面插入的字母，数字代表优先级，值越低优先级越高。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">shared</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pending: A1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> B2 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> C1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> D2</span></span></code></pre></div><ol><li>第一次render，优先级为1。<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">baseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#FFCB6B;">render阶段使用的Update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [A1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> C1]</span></span>
<span class="line"><span style="color:#FFCB6B;">memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AC</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div>其中B2由于优先级为2，低于当前优先级，所以他及其后面的<strong>所有Update</strong>会被保存在baseUpdate中作为下次更新的Update（即<code>B2 C1 D2</code>）。</li><li>第二次render，优先级为2。<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">baseState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">A</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">baseUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> B2 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> C1 </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> D2</span></span>
<span class="line"><span style="color:#FFCB6B;">render阶段使用的Update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [B2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> C1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> D2]</span></span>
<span class="line"><span style="color:#FFCB6B;">memoizedState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ABCD</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div></li></ol><p>通过以上例子我们可以发现，React保证最终的状态一定和用户触发的交互一致，但是中间过程状态可能由于设备不同而不同。</p><h1 id="reactdom-render" tabindex="-1">ReactDOM.render <a class="header-anchor" href="#reactdom-render" aria-label="Permalink to &quot;ReactDOM.render&quot;">​</a></h1><ol><li><p>创建update</p><p>从双缓存机制一节我们知道，首次执行<code>ReactDOM.render</code>会创建<code>fiberRootNode</code>和<code>rootFiber</code>。其中<code>fiberRootNode</code>是整个应用的根节点，<code>rootFiber</code>是要渲染组件所在组件树的根节点。</p></li><li><p>创建fiber</p><p>这一步发生在<code>updateContainer</code>方法中。</p></li></ol><h1 id="this-setstate" tabindex="-1">this.setState <a class="header-anchor" href="#this-setstate" aria-label="Permalink to &quot;this.setState&quot;">​</a></h1><p>可以看到，this.setState内会调用<code>this.updater.enqueueSetState</code>方法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">partialState</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">partialState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">partialState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">partialState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setState(...): takes an object of state variables to update or a function which returns an object of state variables.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">updater</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enqueueSetState</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">partialState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setState</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>在<code>enqueueSetState</code>方法中就是我们熟悉的从<code>创建update</code>到<code>调度update</code>的流程了。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">enqueueSetState</span><span style="color:#A6ACCD;">(inst</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> payload</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 通过组件实例获取对应fiber</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fiber</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">inst</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requestEventTime</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">suspenseConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requestCurrentSuspenseConfig</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取优先级</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requestUpdateLane</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">suspenseConfig</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 创建update</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createUpdate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">eventTime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">suspenseConfig</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 赋值回调函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">update</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">callback</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">callback</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 将update插入updateQueue</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">enqueueUpdate</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 调度update</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">scheduleUpdateOnFiber</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fiber</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lane</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">eventTime</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,70),F=[r];function D(y,i,C,d,A,u){return a(),n("div",null,F)}const g=s(c,[["render",D]]);export{b as __pageData,g as default};
