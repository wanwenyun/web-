import{_ as e,o as t,c as a,V as r}from"./chunks/framework.75331a37.js";const s="/assets/1.c97d05ab.png",o="/assets/2.6732e1ff.jpeg",n="/assets/LC54.d0c9d177.png",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"算法/数组/二维数组花式遍历技巧/index.md","filePath":"算法/数组/二维数组花式遍历技巧/index.md"}'),i={name:"算法/数组/二维数组花式遍历技巧/index.md"},c=r('<h2 id="顺-逆时针旋转矩阵" tabindex="-1">顺/逆时针旋转矩阵 <a class="header-anchor" href="#顺-逆时针旋转矩阵" aria-label="Permalink to &quot;顺/逆时针旋转矩阵&quot;">​</a></h2><p><strong>解题思路</strong>： (以顺时针旋转90度为例)</p><ol><li>我们可以先将 n x n 矩阵 matrix 按照左上到右下的对角线进行镜像对称</li><li>然后再对矩阵的每一行进行反转</li></ol><img src="'+s+'"><p>如果是逆时针旋转90度，则 <img src="'+o+'"></p><p>LC.48 <a href="https://leetcode.cn/problems/rotate-image/" target="_blank" rel="noreferrer">旋转图像</a></p><h2 id="矩阵的螺旋遍历" tabindex="-1">矩阵的螺旋遍历 <a class="header-anchor" href="#矩阵的螺旋遍历" aria-label="Permalink to &quot;矩阵的螺旋遍历&quot;">​</a></h2><p>思路： <img src="'+n+'"></p><p>LC.54 <a href="https://leetcode.cn/problems/spiral-matrix/" target="_blank" rel="noreferrer">螺旋矩阵</a></p>',9),_=[c];function l(p,d,m,h,f,g){return t(),a("div",null,_)}const u=e(i,[["render",l]]);export{b as __pageData,u as default};
