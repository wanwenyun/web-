import{_ as s,o as a,c as l,V as n}from"./chunks/framework.75331a37.js";const p="/assets/stock.7686ee4b.png",F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"算法/动态规划/买卖股票系列问题/index.md","filePath":"算法/动态规划/买卖股票系列问题/index.md"}'),o={name:"算法/动态规划/买卖股票系列问题/index.md"},e=n('<img src="'+p+`" width="70%/"><h3 id="限制条件" tabindex="-1">限制条件 <a class="header-anchor" href="#限制条件" aria-label="Permalink to &quot;限制条件&quot;">​</a></h3><ul><li>先买入才能卖出</li><li>不能同时参加多笔交易，再次买入时，需要先卖出</li><li>k &gt;= 0才能进行交易，否则没有交易次数</li></ul><h3 id="定义操作" tabindex="-1">定义操作 <a class="header-anchor" href="#定义操作" aria-label="Permalink to &quot;定义操作&quot;">​</a></h3><ul><li>买入</li><li>卖出</li><li>不操作</li></ul><h3 id="定义状态" tabindex="-1">定义状态 <a class="header-anchor" href="#定义状态" aria-label="Permalink to &quot;定义状态&quot;">​</a></h3><ul><li>i: 天数</li><li>k: 交易次数，每次交易包含买入和卖出，这里我们只在买入的时候需要将 k - 1</li><li>0: 不持有股票</li><li>1: 持有股票</li></ul><h3 id="举例" tabindex="-1">举例 <a class="header-anchor" href="#举例" aria-label="Permalink to &quot;举例&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">dp[i][k][</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#676E95;font-style:italic;">//第i天 还可以交易k次 手中没有股票</span></span>
<span class="line"><span style="color:#A6ACCD;">  dp[i][k][</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#676E95;font-style:italic;">//第i天 还可以交易k次 手中有股票</span></span></code></pre></div><p>最终的最大收益是<code>dp[n - 1][k][0]而不是dp[n - 1][k][1]</code>，因为最后一天卖出肯定比持有收益更高</p><h3 id="状态转移方程" tabindex="-1">状态转移方程 <a class="header-anchor" href="#状态转移方程" aria-label="Permalink to &quot;状态转移方程&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 今天没有持有股票，分为两种情况：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. dp[i - 1][k][0]，昨天没有持有，今天不操作。 </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. dp[i - 1][k][1] + prices[i] 昨天持有，今天卖出，今天手中就没有股票了。</span></span>
<span class="line"><span style="color:#A6ACCD;">dp[i][k][</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#A6ACCD;">(dp[i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">][k][</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dp[i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">][k][</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> prices[i])</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 今天持有股票，分为两种情况：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1.dp[i - 1][k][1] 昨天持有，今天不操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2.dp[i - 1][k - 1][0] - prices[i] 昨天没有持有，今天买入。</span></span>
<span class="line"><span style="color:#A6ACCD;">dp[i][k][</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#A6ACCD;">(dp[i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">][k][</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dp[i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">][k </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">][</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> prices[i])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//最大利润就是这俩种情况的最大值</span></span></code></pre></div><p>leetcode例题：</p><p>121、买卖股票的最佳时机（easy）限定交易次数 k=1</p><p>122、买卖股票的最佳时机 II（medium）交易次数无限制 k = +infinity</p><p>123、买卖股票的最佳时机 III (hrad) 限定交易次数 k=2</p><p>188、买卖股票的最佳时机 IV (hard) 限定交易次数 最多次数为 k</p><p>309、最佳买卖股票时机含冷冻期(medium) 含有交易冷冻期</p><p>714、买卖股票的最佳时机含手续费 (medium) 每次交易含手续费</p>`,19),t=[e];function c(i,r,C,y,A,d){return a(),l("div",null,t)}const h=s(o,[["render",c]]);export{F as __pageData,h as default};
