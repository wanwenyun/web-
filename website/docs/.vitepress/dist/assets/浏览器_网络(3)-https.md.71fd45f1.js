import{_ as e,o as t,c as o,V as c}from"./chunks/framework.75331a37.js";const l="/assets/pic7.5d1d0b20.png",a="/assets/https.7ea2192a.png",_=JSON.parse('{"title":"什么是HTTPS协议","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器/网络(3)-https.md","filePath":"浏览器/网络(3)-https.md"}'),d={name:"浏览器/网络(3)-https.md"},p=c('<ul><li><a href="#什么是https协议">什么是HTTPS协议</a></li><li><a href="#ssltls">SSL/TLS</a></li><li><a href="#https证书">https证书</a></li><li><a href="#https验证过程对称加密--非对称加密--证书">HTTPS验证过程（对称加密 + 非对称加密 + 证书）</a></li><li><a href="#如何开启https">如何开启https</a></li></ul><blockquote><p><a href="https://time.geekbang.org/column/article/156181?utm_term=zeusQYFJN&amp;utm_source=app&amp;utm_medium=geektime&amp;utm_campaign=216-end&amp;utm_content=v8zhuanlankaipianci0316" target="_blank" rel="noreferrer">参考链接</a></p></blockquote><h1 id="什么是https协议" tabindex="-1">什么是HTTPS协议 <a class="header-anchor" href="#什么是https协议" aria-label="Permalink to &quot;什么是HTTPS协议&quot;">​</a></h1><p><code>HTTPS</code> 并非是一个新的协议，HTTPS是一种通过计算机网络进行安全通信的传输协议，经由<code>HTTP</code>进行通信，利用<code>SSL/TLS</code>建立全信道，加密数据包。HTTPS使用的主要作用是提供对网站服务器的身份认证，同时保护交换数据的隐私与完整性。</p><p>在 HTTPS 中，使用<code>传输层安全性(TLS)</code>或<code>安全套接字层(SSL)</code>对通信协议进行加密。也就是 HTTP + SSL(TLS) = HTTPS。</p><p>在 TCP 和 HTTP 之间插入一个安全层，所有经过安全层的数据都会被加密或者解密：</p><img src="'+l+'" width="70%/"><p>安全层有两个主要的职责：对发起 HTTP 请求的数据进行加密操作和对接收到 HTTP 的内容进行解密操作。</p><p>默认端口号是<code>443</code></p><h1 id="ssl-tls" tabindex="-1">SSL/TLS <a class="header-anchor" href="#ssl-tls" aria-label="Permalink to &quot;SSL/TLS&quot;">​</a></h1><p>SSL 即安全套接字层，它在 OSI 七层网络模型中处于第五层，SSL 在 1999 年被 IETF(互联网工程组)更名为 TLS ，即传输安全层，直到现在，TLS 一共出现过三个版本，1.1、1.2 和 1.3 ，目前最广泛使用的是 1.2.</p><p>TLS 用于两个通信应用程序之间提供保密性和数据完整性。TLS 由<code>记录协议、握手协议、警告协议、变更密码规范协议、扩展协议</code>等几个子协议组成，综合使用了<code>对称加密、非对称加密、身份认证</code>等许多密码学前沿技术.</p><blockquote><p><strong>对称加密</strong>: 加密和解密的秘钥使用的是同一个.因此对称加密算法要保证安全性的话，密钥要做好保密，只能让使用的人知道，不能对外公开。</p><p><strong>非对称加密</strong>: 与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公钥进行<code>加密</code>，私钥进行<code>解密</code>。公开密钥可供任何人使用，私钥只有你自己能够知道。</p><p>HTTPS中： <code>非对称加密</code>作用在<code>安全层握手协商阶段</code>（也就是红色部分）。<code>对称加密</code>作用在<code>传输数据</code>阶段。</p></blockquote><h1 id="https证书" tabindex="-1">https证书 <a class="header-anchor" href="#https证书" aria-label="Permalink to &quot;https证书&quot;">​</a></h1><p>CA机构向浏览器开发商颁发CA证书，主要作用：</p><ul><li>建立一个信息安全通道，来保证数据传输安全；防止数据泄露，</li><li>确认网站的真实性。</li></ul><p>对于浏览器来说，数字证书有两个作用：</p><ul><li>一个是通过数字证书向浏览器证明服务器的身份</li><li>另一个是数字证书里面包含了服务器公钥。</li></ul><h1 id="https验证过程-对称加密-非对称加密-证书" tabindex="-1">HTTPS验证过程（对称加密 + 非对称加密 + 证书） <a class="header-anchor" href="#https验证过程-对称加密-非对称加密-证书" aria-label="Permalink to &quot;HTTPS验证过程（对称加密 + 非对称加密 + 证书）&quot;">​</a></h1><img src="'+a+'"><blockquote><p>HTTPS中： <code>非对称加密</code>作用在<code>安全层握手协商阶段</code>（也就是红色部分）。<code>对称加密</code>作用在<code>传输数据</code>阶段。</p></blockquote><ol><li><p>第一步：浏览器发起hello</p><p>浏览器向服务器发送以下内容：</p><ul><li><code>对称加密套件列表（客户端支持的SSL/TLS协议版本列表）</code></li><li><code>非对称加密套件（算法）列表</code></li><li>浏览器<code>随机数 client-random</code>；</li></ul></li><li><p>第二步：服务器回应Hello</p><p>服务器<strong>保存</strong>浏览器随机数<code>client-random</code>，</p><p>并向浏览器发送：</p><ul><li><code>对称加密套件</code>(SSL/TLS版本)</li><li>选择双方都支持的最安全的<code>非对称加密算法</code></li><li>含有服务端的<code>公钥</code>的<code>证书</code></li><li>服务端生成的随机数<code>service-random</code></li></ul></li><li><p>第三步：浏览器回应</p><ul><li>客户端收到后，检查证书是否合法，主要检查下面几点：1、证书是否过期 2、证书是否已经被吊销。3、证书是否可信。</li><li>证书验证通过后，客户端生成随机数<code>pre-master</code>，然后利用<code>公钥</code>对 pre-master 加密，并向服务器发送加密后的数据；</li></ul></li><li><p>第四步：服务器最后的回应</p><ul><li>服务器使用<code>私钥</code>解密得到这个随机数<code>pre-master</code>。并返回确认消息。</li></ul></li></ol><p>到目前为止，服务器和浏览器就有了共同的 <code>client-random</code>、<code>service-random</code> 和 <code>pre-master</code>，然后服务器和浏览器会使用这三组随机数生成<code>对称密钥（master secret）</code>，因为服务器和浏览器使用同一套方法来生成密钥，所以最终生成的密钥也是相同的。</p><ol start="5"><li>第五步：采用<code>对称加密</code>的密钥(<code>master secret</code>)进行数据传输。</li></ol><h1 id="如何开启https" tabindex="-1">如何开启https <a class="header-anchor" href="#如何开启https" aria-label="Permalink to &quot;如何开启https&quot;">​</a></h1><p>首先需要获取https证书，将https证书和网站域名进行绑定，就可以通过https访问网站了。</p>',26),i=[p];function s(r,h,n,T,S,u){return t(),o("div",null,i)}const P=e(d,[["render",s]]);export{_ as __pageData,P as default};
